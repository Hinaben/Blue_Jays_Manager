CREATE TABLE BattingStats(
	BattingStatsID NUMBER(5) NOT NULL,
	PlayerNum NUMBER(4) NOT NULL,
	BatStatYear varchar(50) NULL,
	Team varchar(50) NULL,
	League varchar(10) NULL,
	Games number(8,3) NOT NULL,
	AtBats number(8,3) NOT NULL,
	Runs number(8,3) NOT NULL,
	Hits number(8,3) NOT NULL,
	TotalBases number(8,3) NOT NULL,
	Doubles number(8,3) NOT NULL,
	Triples number(8,3) NOT NULL,
	HomeRuns number(8,3) NOT NULL,
	RunsBattedIn number(8,3) NOT NULL,
	BasesOnBalls number(8,3) NOT NULL,
	IntentionalBasesOnBalls number(8,3) NOT NULL,
	Strikeouts number(8,3) NOT NULL,
	StolenBases number(8,3) NOT NULL,
	CaughtStealing number(8,3) NOT NULL,
	BattingAverage number(8,3) NOT NULL,
	OnBasePercentage number(8,3) NOT NULL,
	SluggingPercentage number(8,3) NOT NULL,
	OnBasePlusSlugging number(8,3) NOT NULL,
	GroundOrAirOuts number(8,3) NOT NULL,
  CONSTRAINT bat_pk PRIMARY KEY (BattingStatsID));
  
  CREATE TABLE CoachRoster(
	CoachID number(5) NOT NULL,
	CoachNumber number(8,3) NOT NULL,
	Name varchar(30) NOT NULL,
	Position varchar(30) NOT NULL,
 CONSTRAINT coach_pk PRIMARY KEY (CoachID));

CREATE TABLE FieldingStats(
	FieldingStatsID number(5) NOT NULL,
	PlayerNum number(8,3) NOT NULL,
	FieldStatYear varchar(30) NULL,
	Team varchar(30) NULL,
	League varchar(30) NULL,
	Position varchar(30) NULL,
	Games number(8,3) NOT NULL,
	GamesStarted number(8,3) NOT NULL,
	InningsAtThisPosition number(8,3) NOT NULL,
	TotalChances number(8,3) NOT NULL,
	Putouts number(8,3) NOT NULL,
	Assists number(8,3) NOT NULL,
	Errors number(8,3) NOT NULL,
	DoublePlays number(8,3) NOT NULL,
	PassedBall number(8,3) NOT NULL,
	StolenBases number(8,3) NOT NULL,
	CaughtStealing number(8,3) NOT NULL,
	RangeFactor number(8,3) NOT NULL,
	FieldingPercentage number(8,3) NOT NULL,
  CONSTRAINT field_pk PRIMARY KEY (FieldingStatsID));
  
  CREATE TABLE PitchingStats(
	PitchingStatsID number(8,3) NOT NULL,
	PlayerNum number(8,3) NOT NULL,
	PitchStatYear varchar(30) NULL,
	Team varchar(30) NULL,
	League varchar(30) NULL,
	Wins number(8,3) NOT NULL,
	Losses number(8,3) NOT NULL,
	EarnedRunsAverage number(8,3) NOT NULL,
	Games number(8,3) NOT NULL,
	GamesStarted number(8,3) NOT NULL,
	CompleteGames number(8,3) NOT NULL,
	ShutOuts number(8,3) NOT NULL,
	Saves number(8,3) NOT NULL,
	SaveOpportunities number(8,3) NOT NULL,
	InningsPitched number(8,3) NOT NULL,
	Hits number(8,3) NOT NULL,
	Runs number(8,3) NOT NULL,
	EarnedRuns number(8,3) NOT NULL,
	HomeRuns number(8,3) NOT NULL,
	HitBatsmen number(8,3) NOT NULL,
	BasesOnBalls number(8,3) NOT NULL,
	IntentionalBasesOnBalls number(8,3) NOT NULL,
	StrikeOuts number(8,3) NOT NULL,
	BattingAverage number(8,3) NOT NULL,
	WalksAndHitsPerInningsPitched number(8,3) NOT NULL,
	GroundOrAirOuts number(8,3) NOT NULL,
  CONSTRAINT pitch_pk PRIMARY KEY (PitchingStatsID));

CREATE TABLE PlayerBio(
	PlayerBioID number(8,3) NOT NULL,
	PlayerNum number(8,3) NOT NULL,
	Name varchar(30) NOT NULL,
	Age number(8,3) NOT NULL,
	Born varchar(55) NOT NULL,
	Draft varchar(65) NULL,
	HighSchool varchar(45) NULL,
	College varchar(30) NULL,
	Debut varchar(35) NOT NULL,
  CONSTRAINT bio_pk PRIMARY KEY (PlayerBioID));
  
  CREATE TABLE PlayerRoster(
	PlayerID number(8,3) NOT NULL,
	PlayerNum number(10,3) NOT NULL,
	Name varchar(30) NOT NULL,
	Position nvarchar2(30) NOT NULL,
	Height number(10,3) NOT NULL,
	Weight number(10,3) NOT NULL,
	SkillOrientation varchar(30) NOT NULL,
	DateOfBirth varchar2(45) NOT NULL,
  CONSTRAINT roster_pk PRIMARY KEY (PlayerID));
  
  CREATE TABLE PlayerStatsSummaries(
	PlayerStatsSummaryID NUMBER(8,3) NOT NULL,
	PlayerNum NUMBER(5) NOT NULL,
	SummaryYear varchar (30) NULL,
	Wins NUMBER(8,3) NOT NULL,
	Losses NUMBER(8,3) NOT NULL,
	EarnedRunsAverage NUMBER(8,3) NOT NULL,
	Games NUMBER(8,3) NOT NULL,
	GamesStarted NUMBER NOT NULL,
	Saves NUMBER(8,3) NOT NULL,
	InningsPitched NUMBER(8,3) NOT NULL,
	StrikeOuts NUMBER(8,3) NOT NULL,
	WalkAndHitsPerInningsPitched NUMBER(8,3) NOT NULL,
  CONSTRAINT stats_pk PRIMARY KEY (PlayerStatsSummaryID));

CREATE TABLE tblExceptionLog(
	Id  NUMBER GENERATED ALWAYS AS IDENTITY,
	EXCEPTIONDATE DATE NOT NULL,
	ExceptionMessage varchar(65) NOT NULL,
	StackTrace varchar(65) NOT NULL
);

CREATE TABLE tblUsers(
	Id NUMBER(8,3) NOT NULL,
	FirstName varchar(50) NOT NULL,
	LastName varchar(50) NOT NULL,
	Email varchar(50) NOT NULL,
	UserName varchar(50) NOT NULL,
	Password varchar(200) NOT NULL,
	Role varchar(50) NOT NULL,
	Attempts NUMBER(3) NULL,
	IsLocked NUMBER(3) NULL,
	LockedDate date NULL,
	UserID CHAR(36) NULL,
  CONSTRAINT user_pk PRIMARY KEY (Id));

----------STORED PROCEDURES---------------------------

create or replace PROCEDURE spInsertIntoBattingStats
(
  battingStatsID IN BATTINGSTATS.BattingStatsID%TYPE,
  playerNum IN BATTINGSTATS.PlayerNum%TYPE,
  batStatYear IN BATTINGSTATS.BatStatYear%TYPE,
  team IN BATTINGSTATS.Team%TYPE,
  league IN BATTINGSTATS.League%TYPE,
  games IN BATTINGSTATS.Games%TYPE,
  atBats IN BATTINGSTATS.AtBats%TYPE,
  runs IN BATTINGSTATS.Runs%TYPE,
  hits IN BATTINGSTATS.Hits%TYPE,
  totalBases IN BATTINGSTATS.TotalBases%TYPE,
  doubles IN BATTINGSTATS.Doubles%TYPE,
  triples IN BATTINGSTATS.Triples%TYPE,
  homeRuns  IN BATTINGSTATS.HomeRuns%TYPE,
  runsBattedIn IN BATTINGSTATS.RunsBattedIn%TYPE,
  basesInBalls IN BATTINGSTATS.BasesOnBalls%TYPE,
  intentionalBasesOnBalls IN BATTINGSTATS.IntentionalBasesOnBalls%TYPE,
  strikeouts IN BATTINGSTATS.Strikeouts%TYPE,
  stolenBases IN BATTINGSTATS.StolenBases%TYPE,
  caughtStealing IN BATTINGSTATS.CaughtStealing%TYPE,
  battingAverage IN BATTINGSTATS.BattingAverage%TYPE,
  onBasePercentage IN BATTINGSTATS.OnBasePercentage%TYPE,
  sluggingPercentage IN BATTINGSTATS.SluggingPercentage%TYPE,
  onBasePlusSlugging  IN BATTINGSTATS.OnBasePlusSlugging%TYPE,
  groundOrAIrOuts IN BATTINGSTATS.GroundOrAirOuts%TYPE
)
IS
  BEGIN
    INSERT INTO BATTINGSTATS
    (
      BattingStatsID,
      PlayerNum,
      BatStatYear,
      Team,
      League,
      Games,
      AtBats,
      Runs,
      Hits,
      TotalBases,
      Doubles,
      Triples,
      HomeRuns,
      RunsBattedIn,
      BasesOnBalls,
      IntentionalBasesOnBalls,
      Strikeouts,
      StolenBases,
      CaughtStealing,
      BattingAverage,
      OnBasePercentage,
      SluggingPercentage,
      OnBasePlusSlugging,
      GroundOrAirOuts
    )
    VALUES
    (
      battingStatsID,
      playerNum,
      batStatYear,
      team ,
      league ,
      games ,
      atBats ,
      runs ,
      hits ,
      totalBases ,
      doubles ,
      triples ,
      homeRuns ,
      runsBattedIn ,
      basesInBalls ,
      intentionalBasesOnBalls ,
       strikeouts ,
       stolenBases ,
       caughtStealing ,
      battingAverage ,
      onBasePercentage,
      sluggingPercentage ,
      onBasePlusSlugging ,
      groundOrAIrOuts
    );
    END;


create or replace procedure spInsertIntoCoachRoster
(
coachID COACHROSTER.COACHID%TYPE,
coachNumber COACHROSTER.CoachNumber%TYPE,
name COACHROSTER.Name%TYPE,
position COACHROSTER.Position%TYPE
)
as
	Begin

		INSERT INTO CoachRoster
           (CoachID,
            CoachNumber
           ,Name
           ,Position)
     VALUES
           (coachID,
            coachNumber,
            name,
            position);
	End;


create or replace PROCEDURE spInsertIntoFieldingStats
(
  fieldingStatsID FIELDINGSTATS.FIELDINGSTATSID%TYPE,
  playerNum FIELDINGSTATS.PlayerNum%TYPE,
  fieldStatYear FIELDINGSTATS.FieldStatYear%TYPE,
  team FIELDINGSTATS.Team%TYPE,
  league FIELDINGSTATS.League%TYPE,
  position FIELDINGSTATS.Position%TYPE,
  games FIELDINGSTATS.Games%TYPE,
  gamesStarted FIELDINGSTATS.GamesStarted%TYPE,
  inningsAtThisPosition FIELDINGSTATS.InningsAtThisPosition%TYPE,
  totalChances FIELDINGSTATS.TotalChances%TYPE,
  putOuts FIELDINGSTATS.Putouts%TYPE,
  assists FIELDINGSTATS.Assists%TYPE,
  errors FIELDINGSTATS.Errors%TYPE,
  doublePlays FIELDINGSTATS.DoublePlays%TYPE,
  passedBall FIELDINGSTATS.PassedBall%TYPE,
  stolenBases FIELDINGSTATS.StolenBases%TYPE,
  caughtStealing FIELDINGSTATS.CaughtStealing%TYPE,
  rangeFactor FIELDINGSTATS.RangeFactor%TYPE,
  fieldingPercentage FIELDINGSTATS.FieldingPercentage%TYPE
)
as
	Begin

		INSERT INTO FieldingStats
           (FieldingStatsID,
            PlayerNum
           ,FieldStatYear
           ,Team
           ,League
           ,Position
           ,Games
           ,GamesStarted
           ,InningsAtThisPosition
           ,TotalChances
           ,Putouts
           ,Assists
           ,Errors
           ,DoublePlays
           ,PassedBall
           ,StolenBases
           ,CaughtStealing
           ,RangeFactor
           ,FieldingPercentage)
     VALUES
           (fieldingStatsID,
            playerNum,
            fieldStatYear,
            team,
            league,
            position,
            games,
            gamesStarted,
            inningsAtThisPosition,
            totalChances,
            putOuts,
            assists,
            errors,
            doublePlays,
            passedBall,
            stolenBases,
            caughtStealing ,
            rangeFactor,
            fieldingPercentage);
	End;


create or replace procedure spInsertIntoPitchingStats
(
  pitchingStatsID PITCHINGSTATS.PITCHINGSTATSID%TYPE,
  playerNum PITCHINGSTATS.PlayerNum%TYPE,
  pitchStatYear PITCHINGSTATS.PitchStatYear%TYPE,
  team PITCHINGSTATS.Team%TYPE,
  league PITCHINGSTATS.League%TYPE,
  wins PITCHINGSTATS.Wins%TYPE,
  losses PITCHINGSTATS.Losses%TYPE,
  earnedRunsAverage PITCHINGSTATS.EarnedRunsAverage%TYPE,
  games PITCHINGSTATS.Games%TYPE,
  gamesStarted PITCHINGSTATS.GamesStarted%TYPE,
  completeGames PITCHINGSTATS.CompleteGames%TYPE,
  shutOuts PITCHINGSTATS.ShutOuts%TYPE,
  saves PITCHINGSTATS.Saves%TYPE,
  saveOpportunities PITCHINGSTATS.SaveOpportunities%TYPE,
  inningsPitched PITCHINGSTATS.InningsPitched%TYPE,
  hits PITCHINGSTATS.Hits%TYPE,
  runs PITCHINGSTATS.Runs%TYPE,
  earnedRuns PITCHINGSTATS.EarnedRuns%TYPE,
  homeRuns PITCHINGSTATS.HomeRuns%TYPE,
  hitBatsmen PITCHINGSTATS.HitBatsmen%TYPE,
  basesOnBalls PITCHINGSTATS.BasesOnBalls%TYPE,
  intentionalBasesOnBalls PITCHINGSTATS.IntentionalBasesOnBalls%TYPE,
  strikeOuts PITCHINGSTATS.StrikeOuts%TYPE,
  battingAverage PITCHINGSTATS.BattingAverage%TYPE,
  walksAndHitsPerInningsPitched PITCHINGSTATS.WalksAndHitsPerInningsPitched%TYPE,
  groundOrAirOuts PITCHINGSTATS.GroundOrAirOuts%TYPE
)
as 
	Begin
	
		INSERT INTO PitchingStats
           (PitchingStatsID,
            PlayerNum
           ,PitchStatYear
           ,Team
           ,League
           ,Wins
           ,Losses
           ,EarnedRunsAverage
           ,Games
           ,GamesStarted
           ,CompleteGames
           ,ShutOuts
           ,Saves
           ,SaveOpportunities
           ,InningsPitched
           ,Hits
            ,Runs
           ,EarnedRuns
           ,HomeRuns
           ,HitBatsmen
           ,BasesOnBalls
           ,IntentionalBasesOnBalls
           ,StrikeOuts
           ,BattingAverage
           ,WalksAndHitsPerInningsPitched
           ,GroundOrAirOuts)
     VALUES
           (pitchingStatsID,
            playerNum,
            pitchStatYear,
            team,
            league,
            wins,
            losses,
            earnedRunsAverage,
            games,
            gamesStarted,
            completeGames,
            shutOuts,
            saves,
            saveOpportunities,
            inningsPitched,
            hits,
            runs,
            earnedRuns,
            homeRuns,
            hitBatsmen,
            basesOnBalls,
            intentionalBasesOnBalls,
            strikeOuts,
            battingAverage,
            walksAndHitsPerInningsPitched,
            groundOrAirOuts);
	End;


create or replace procedure spInsertIntoPlayerBio
(
  playerBioID PLAYERBIO.PLAYERBIOID%TYPE,
  playerNum PLAYERBIO.PlayerNum%TYPE,
  name PLAYERBIO.Name%TYPE,
  age PLAYERBIO.Age%TYPE,
  born PLAYERBIO.Born%TYPE,
  draft PLAYERBIO.Draft%TYPE,
  highSchool PLAYERBIO.HighSchool%TYPE,
  college PLAYERBIO.College%TYPE,
  debut PLAYERBIO.Debut%TYPE
)
as
	Begin

		INSERT INTO PlayerBio
           (PlayerBioID,
            PlayerNum
           ,Name
           ,Age
           ,Born
           ,Draft
           ,HighSchool
           ,College
           ,Debut)
     VALUES
           (playerBioID,
			playerNum,
			name,
			age,
			born,
			draft,
			highSchool,
			college,
			debut);
	End;


create or replace procedure spInsertIntoPlayerRoster
(
playerID PLAYERROSTER.PLAYERID%TYPE,
playerNum PLAYERROSTER.PlayerNum%TYPE,
name PLAYERROSTER.Name%TYPE,
position PLAYERROSTER.Position%TYPE,
height PLAYERROSTER.Height%TYPE,
weight PLAYERROSTER.Weight%TYPE,
skillOrientation PLAYERROSTER.SkillOrientation%TYPE,
dateOfBirth PLAYERROSTER.DateOfBirth%TYPE
)
as
	Begin

		INSERT INTO PlayerRoster
           (PLayerID,
            PlayerNum
           ,Name
           ,Position
           ,Height
           ,Weight
           ,SkillOrientation
           ,DateOfBirth)
     VALUES
			( playerID,
        playerNum,
        name,
        position,
        height,
        weight,
        skillOrientation,
        dateOfBirth);
	End;


create or replace procedure spInsertIntoPlayerStatsSummary
(
  playerStatsSummaryID PLAYERSTATSSUMMARIES.PLAYERSTATSSUMMARYID%TYPE,
  playerNum PLAYERSTATSSUMMARIES.PlayerNum%TYPE,
  summaryYear PLAYERSTATSSUMMARIES.SummaryYear%TYPE,
  wins PLAYERSTATSSUMMARIES.Wins%TYPE,
  losses PLAYERSTATSSUMMARIES.Losses%TYPE,
  earnedRunsAverage PLAYERSTATSSUMMARIES.EarnedRunsAverage%TYPE,
  games PLAYERSTATSSUMMARIES.Games%TYPE,
  gamesStarted PLAYERSTATSSUMMARIES.GamesStarted%TYPE,
  saves PLAYERSTATSSUMMARIES.Saves%TYPE,
  inningsPitched PLAYERSTATSSUMMARIES.InningsPitched%TYPE,
  strikeOuts PLAYERSTATSSUMMARIES.StrikeOuts%TYPE,
  walkAndHitsPerInningsPitched PLAYERSTATSSUMMARIES.WalkAndHitsPerInningsPitched%TYPE
)
as
	Begin
	
		INSERT INTO PlayerStatsSummaries
           (PlayerStatsSummaryID,
            PlayerNum
           ,SummaryYear
           ,Wins
           ,Losses
           ,EarnedRunsAverage
           ,Games
           ,GamesStarted
           ,Saves
           ,InningsPitched
           ,StrikeOuts
           ,WalkAndHitsPerInningsPitched)
     VALUES
           (playerStatsSummaryID,
      playerNum,
			summaryYear,
			wins,
			losses,
			earnedRunsAverage,
			games,
			gamesStarted,
			saves,
			inningsPitched,
			strikeOuts,
      walkAndHitsPerInningsPitched);
	End;


Create OR REPLACE procedure spInsertException
(
  exceptionMessage TBLEXCEPTIONLOG.EXCEPTIONMESSAGE%TYPE,
  stackTrace TBLEXCEPTIONLOG.STACKTRACE%TYPE
)
IS
Begin
      Insert into tblExceptionLog (EXCEPTIONDATE, ExceptionMessage, StackTrace)
      Values( SYSDATE, exceptionMessage, stackTrace);
end;

----- 11-24-2016-----------
create or replace PROCEDURE AuthenticateUser_sp
(
  c_username IN VARCHAR,
  c_password IN VARCHAR,
  return_Val OUT VARCHAR2
)
IS
  AccountLocked VARCHAR2(30);
  usercount NUMBER;
  retryCount NUMBER;
  RetryAttempts VARCHAR2(30);
  TYPE rec_type IS RECORD
  (
    u_id TBLUSERS.ID%TYPE,
    f_name TBLUSERS.FIRSTNAME%TYPE,
    l_name TBLUSERS.LASTNAME%TYPE,
    e_mail TBLUSERS.EMAIL%TYPE,
    user_name TBLUSERS.USERNAME%TYPE,
    pass_word TBLUSERS.PASSWORD%TYPE,
    u_role TBLUSERS.ROLE%TYPE
  );
  authUser rec_type;
BEGIN
  --checked to see if account is locked
  SELECT TO_CHAR(IsLocked)
  INTO AccountLocked
  FROM TBLUSERS
  WHERE TBLUSERS.USERNAME = c_username;
  
   -- Check if the username and password match
  countUsername(c_username, c_password, usercount);
  
  --retrieve number of attemps
  SELECT NVL(TO_CHAR(TBLUSERS.ATTEMPTS), '0')
  INTO RetryAttempts
  FROM TBLUSERS
  where TBLUSERS.USERNAME = c_username;
  
   --If the account is already locked
  IF AccountLocked = '1' THEN

    return_Val := TO_CHAR(100, '9,9,9');
    
      -- If match found
  ELSIF usercount = 1 THEN
    -- Reset RetryAttempts 
    spUpdateTblUsersAttempts(0, c_username);
    
    --data to be returned to calling application
    SELECT TBLUSERS.Id, TBLUSERS.FIRSTNAME, TBLUSERS.LASTNAME, TBLUSERS.EMAIL, TBLUSERS.USERNAME, TBLUSERS.PASSWORD, TBLUSERS.ROLE 
    INTO authUser.u_id, authUser.f_name,authUser.l_name,authUser.e_mail,authUser.user_name,authUser.pass_word,authUser.u_role
    FROM tblUsers
    WHERE TBLUSERS.USERNAME = c_username;
    
    return_Val := authUser.u_id || ','||authUser.f_name|| ','||authUser.l_name|| ','||authUser.e_mail|| ','||authUser.user_name|| ','||authUser.pass_word|| ','||authUser.u_role;
    
    -- If a match is not found
  ELSE
  --increment attempts
    RetryAttempts := TO_CHAR( IncreaseAttempts(RetryAttempts));
    
    --if attempts is less that allowed amount
    IF RetryAttempts < '4' THEN
    
    --update attempts again
      spUpdateTblUsersAttempts(TO_NUMBER(RetryAttempts), c_username);
      
      return_Val := TO_CHAR(CONCAT(0||0,RetryAttempts), '0,0,9');
    
    -- If re-try attempts are maxed
    ELSE
      spUpdateTblUsers(TO_NUMBER(RetryAttempts), 1, SYSDATE, c_username);
      
      return_Val := TO_CHAR(100, '9,9,9');

    END IF;
  END IF;
END;


create or replace procedure countUsername
  (
    username IN VARCHAR2,
    gpassword IN VARCHAR2,
    count OUT NUMBER
  )
  AS
  begin
    select COUNT(TBLUSERS.USERNAME)
    INTO count
    FROM TBLUSERS
    WHERE TBLUSERS.USERNAME = username and  TBLUSERS.PASSWORD = gpassword;
    end;

create or replace procedure spUpdateTblUsersAttempts
(
  uattempts IN TBLUSERS.Attempts%TYPE,
  cusername IN TBLUSERS.USERNAME%TYPE
)
IS
BEGIN
  UPDATE TBLUSERS
  SET TBLUSERS.ATTEMPTS = uattempts
  WHERE TBLUSERS.USERNAME = cusername;
  COMMIT;
END;


create or replace procedure spUpdateTblUsers
(
  c_attempts IN TBLUSERS.Attempts%TYPE,
  c_isLocked IN TBLUSERS.ISLOCKED%TYPE,
  c_lockDate IN TBLUSERS.LOCKEDDATE%TYPE,
  c_username IN TBLUSERS.USERNAME%TYPE
)
IS
BEGIN
  UPDATE TBLUSERS
  SET TBLUSERS.ATTEMPTS = c_attempts, TBLUSERS.ISLOCKED = c_isLocked, TBLUSERS.LOCKEDDATE = c_lockDate
  WHERE TBLUSERS.USERNAME = c_username;
  COMMIT;
END;


create or replace function IncreaseAttempts
(
  retry_attempts IN VARCHAR2
)
RETURN VARCHAR2
IS
  retry_count NUMBER(3,0);
  final_calc VARCHAR2(3);
BEGIN

  retry_count := TO_NUMBER(retry_attempts);
    final_calc := TO_CHAR(retry_count + 1);

RETURN final_calc;
END;

----------------------11/25/2016--------------------------

create or replace PROCEDURE registerUser_sp
(
  first_name IN TBLUSERS.FIRSTNAME%TYPE,
  last_name IN TBLUSERS.LASTNAME%TYPE,
  user_email IN TBLUSERS.EMAIL%TYPE,
  user_name IN TBLUSERS.USERNAME%TYPE,
  pass_word IN TBLUSERS.PASSWORD%TYPE,
  user_role IN TBLUSERS.ROLE%TYPE,
  u_exists OUT NUMBER
)
IS
  userCount NUMBER(3,0);
  u_email NUMBER(3,0);
BEGIN
  SELECT COUNT(USERNAME), COUNT(TBLUSERS.EMAIL)
  INTO userCount, u_email
  FROM TBLUSERS
  WHERE USERNAME = user_name;
  
  IF userCount > 0 THEN
    u_exists := -1;
  ELSIF u_email > 0 THEN
    u_exists := -2;
  ELSE
    INSERT INTO TBLUSERS
    (
      ID,
      FIRSTNAME,
      LASTNAME,
      EMAIL,
      USERNAME,
      PASSWORD,
      ROLE
    )
    VALUES
    (
      user_id_seq.NEXTVAL,
      first_name,
      last_name,
      user_email,
      user_name,
      pass_word,
      user_role
    );
    COMMIT;
    u_exists := 1;
  END IF;
END;


create or replace PROCEDURE resetPassword_sp
(
  user_name TBLUSERS.USERNAME%TYPE,
  user_details OUT VARCHAR2
)
IS
  TYPE rec_type IS RECORD
  (
    user_id TBLUSERS.USERID%TYPE,
    user_email TBLUSERS.EMAIL%TYPE,
    first_name TBLUSERS.FIRSTNAME%TYPE,
    last_name TBLUSERS.LASTNAME%TYPE
  );
  u_record rec_type;
BEGIN
   --if username exists
   SELECT USERID, EMAIL, FIRSTNAME, LASTNAME
   INTO u_record.user_id, u_record.user_email, u_record.first_name, u_record.last_name
   FROM TBLUSERS
   WHERE USERNAME = user_name;
   
   IF u_record.user_id IS NULL THEN
    u_record.user_id := sys_guid();
    UPDATE tblusers
    SET userid = u_record.user_id
    WHERE USERNAME = user_name;
    COMMIT;
    
    user_details := '1' || ',' || u_record.user_id || ',' || u_record.user_email || ',' || u_record.first_name || ',' || u_record.last_name;
  
  ELSE
     user_details := '0';
  END IF;
END;


CREATE SEQUENCE user_id_seq
INCREMENT BY 1
START WITH 2
NOMAXVALUE
NOCYCLE
CACHE 20;

---------------11-30-2016----------------------------

create or replace PROCEDURE changePassword_sp
(
  user_guid IN VARCHAR2,
  pass_word IN VARCHAR2,
  return_val OUT VARCHAR2
)
IS
  TYPE rec_type IS RECORD
  (
    fName TBLUSERS.FIRSTNAME%TYPE,
    lName TBLUSERS.LASTNAME%TYPE,
    u_email TBLUSERS.EMAIL%TYPE
  );
  u_record rec_type;
  user_name VARCHAR2(30);
BEGIN
  SELECT USERNAME, FIRSTNAME, LASTNAME, EMAIL
  INTO user_name, u_record.fName, u_record.lName, u_record.u_email
  FROM TBLUSERS
  WHERE userid = user_guid;
  
  IF user_name IS NULL THEN
    return_val := '0';
  ELSE
    UPDATE TBLUSERS
    SET PASSWORD = pass_word
    WHERE USERNAME = user_name;
    
    UPDATE TBLUSERS
    SET USERID = NULL
    WHERE USERNAME = user_name;
    COMMIT;
    return_val := u_record.fName||','||u_record.lName||','||u_record.u_email||','||user_name;
  END IF;
END;

create or replace PROCEDURE changeUserPassword_sp
(
  user_id IN TBLUSERS.ID%TYPE,
  pass_word IN TBLUSERS.PASSWORD%TYPE,
  retVal OUT VARCHAR2
)
IS
BEGIN
  UPDATE TBLUSERS
  SET PASSWORD = pass_word
  WHERE ID = user_id;
  retVal := '1';
  COMMIT;
END;

create or replace PROCEDURE isPasswordResetLinkValid_sp
(
  user_guid IN VARCHAR2,
  return_val OUT NUMBER
)
IS
user_name VARCHAR2(30);
BEGIN
  SELECT USERNAME
  INTO user_name
  FROM TBLUSERS
  WHERE USERID = user_guid;
  
  IF user_name IS NULL THEN
    return_val := 0;
  ELSE
    return_val := 1;
  END IF;
END;

create or replace PROCEDURE resetPasswordRequest_sp
(
  user_name TBLUSERS.USERNAME%TYPE,
  user_details OUT VARCHAR2
)
IS
  TYPE rec_type IS RECORD
  (
    user_id TBLUSERS.USERID%TYPE,
    user_email TBLUSERS.EMAIL%TYPE,
    first_name TBLUSERS.FIRSTNAME%TYPE,
    last_name TBLUSERS.LASTNAME%TYPE
  );
  u_record rec_type;
BEGIN
   --if username exists
   SELECT USERID, EMAIL, FIRSTNAME, LASTNAME
   INTO u_record.user_id, u_record.user_email, u_record.first_name, u_record.last_name
   FROM TBLUSERS
   WHERE USERNAME = user_name;
   
   IF u_record.user_id IS NULL THEN
    u_record.user_id := sys_guid();
    UPDATE tblusers
    SET userid = u_record.user_id
    WHERE USERNAME = user_name;
    COMMIT;
    
    user_details := '1' || ',' || u_record.user_id || ',' || u_record.user_email || ',' || u_record.first_name || ',' || u_record.last_name;
  
  ELSE
     user_details := '1';
  END IF;
END;


create or replace PROCEDURE usernameRequest_sp
(
  u_email IN TBLUSERS.EMAIL%TYPE,
  retVal OUT VARCHAR2
)
IS
  TYPE rec_type IS RECORD
  (
    fName TBLUSERS.FIRSTNAME%TYPE,
    lName TBLUSERS.LASTNAME%TYPE,
    user_name TBLUSERS.USERNAME%TYPE
  );
  u_record rec_type;
  num_user NUMBER(3,0);
BEGIN
  SELECT COUNT(USERNAME)
  INTO num_user
  FROM TBLUSERS
  WHERE EMAIL = u_email;
  
  IF num_user > 0 THEN
    SELECT USERNAME, FIRSTNAME, LASTNAME
    INTO u_record.user_name, u_record.fName, u_record.lName
    FROM TBLUSERS
    WHERE EMAIL = u_email;
    
    retVal := '1'||','||u_record.user_name||','||u_record.fName||','||u_record.lName;
  ELSE
    retVal := '9';
  END IF;
END;
